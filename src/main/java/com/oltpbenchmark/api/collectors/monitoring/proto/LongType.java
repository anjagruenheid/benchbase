// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor.proto

package com.oltpbenchmark.api.collectors.monitoring.proto;

/**
 * <pre>
 * Enum for long values.
 * Next id: 42
 * </pre>
 *
 * Protobuf enum {@code com.oltpbenchmark.api.collectors.monitoring.proto.LongType}
 */
public enum LongType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>EXECUTION_COUNT = 0;</code>
   */
  EXECUTION_COUNT(0),
  /**
   * <code>MIN_WORKER_TIME = 1;</code>
   */
  MIN_WORKER_TIME(1),
  /**
   * <code>MAX_WORKER_TIME = 2;</code>
   */
  MAX_WORKER_TIME(2),
  /**
   * <code>TOTAL_WORKER_TIME = 3;</code>
   */
  TOTAL_WORKER_TIME(3),
  /**
   * <code>MIN_PHYSICAL_READS = 4;</code>
   */
  MIN_PHYSICAL_READS(4),
  /**
   * <code>MAX_PHYSICAL_READS = 5;</code>
   */
  MAX_PHYSICAL_READS(5),
  /**
   * <code>TOTAL_PHYSICAL_READS = 6;</code>
   */
  TOTAL_PHYSICAL_READS(6),
  /**
   * <code>MIN_ELAPSED_TIME = 7;</code>
   */
  MIN_ELAPSED_TIME(7),
  /**
   * <code>MAX_ELAPSED_TIME = 8;</code>
   */
  MAX_ELAPSED_TIME(8),
  /**
   * <code>TOTAL_ELAPSED_TIME = 9;</code>
   */
  TOTAL_ELAPSED_TIME(9),
  /**
   * <code>MIN_ROWS = 10;</code>
   */
  MIN_ROWS(10),
  /**
   * <code>MAX_ROWS = 11;</code>
   */
  MAX_ROWS(11),
  /**
   * <code>TOTAL_ROWS = 12;</code>
   */
  TOTAL_ROWS(12),
  /**
   * <code>MIN_SPILLS = 13;</code>
   */
  MIN_SPILLS(13),
  /**
   * <code>MAX_SPILLS = 14;</code>
   */
  MAX_SPILLS(14),
  /**
   * <code>TOTAL_SPILLS = 15;</code>
   */
  TOTAL_SPILLS(15),
  /**
   * <code>USED_MEMORY = 16;</code>
   */
  USED_MEMORY(16),
  /**
   * <code>TARGET_MEMORY = 17;</code>
   */
  TARGET_MEMORY(17),
  /**
   * <code>CPU_USAGE_PERC = 18;</code>
   */
  CPU_USAGE_PERC(18),
  /**
   * <code>CPU_EFFECTIVE_PERC = 19;</code>
   */
  CPU_EFFECTIVE_PERC(19),
  /**
   * <code>CPU_VIOLATED_PERC = 20;</code>
   */
  CPU_VIOLATED_PERC(20),
  /**
   * <code>TOTAL_LOGICAL_WRITES = 21;</code>
   */
  TOTAL_LOGICAL_WRITES(21),
  /**
   * <code>MIN_LOGICAL_WRITES = 22;</code>
   */
  MIN_LOGICAL_WRITES(22),
  /**
   * <code>MAX_LOGICAL_WRITES = 23;</code>
   */
  MAX_LOGICAL_WRITES(23),
  /**
   * <code>TOTAL_LOGICAL_READS = 24;</code>
   */
  TOTAL_LOGICAL_READS(24),
  /**
   * <code>MIN_LOGICAL_READS = 25;</code>
   */
  MIN_LOGICAL_READS(25),
  /**
   * <code>MAX_LOGICAL_READS = 26;</code>
   */
  MAX_LOGICAL_READS(26),
  /**
   * <code>TOTAL_USED_GRANT_KB = 27;</code>
   */
  TOTAL_USED_GRANT_KB(27),
  /**
   * <code>MIN_USED_GRANT_KB = 28;</code>
   */
  MIN_USED_GRANT_KB(28),
  /**
   * <code>MAX_USED_GRANT_KB = 29;</code>
   */
  MAX_USED_GRANT_KB(29),
  /**
   * <code>TOTAL_USED_THREADS = 30;</code>
   */
  TOTAL_USED_THREADS(30),
  /**
   * <code>MIN_USED_THREADS = 31;</code>
   */
  MIN_USED_THREADS(31),
  /**
   * <code>MAX_USED_THREADS = 32;</code>
   */
  MAX_USED_THREADS(32),
  /**
   * <code>CPU_USAGE_PERC_BASE = 33;</code>
   */
  CPU_USAGE_PERC_BASE(33),
  /**
   * <code>CPU_EFFECTIVE_PERC_BASE = 34;</code>
   */
  CPU_EFFECTIVE_PERC_BASE(34),
  /**
   * <code>CPU_USAGE_TARGET_PERC = 35;</code>
   */
  CPU_USAGE_TARGET_PERC(35),
  /**
   * <code>DISK_READ_IOPS = 36;</code>
   */
  DISK_READ_IOPS(36),
  /**
   * <code>DISK_WRITE_IOPS = 37;</code>
   */
  DISK_WRITE_IOPS(37),
  /**
   * <code>LOCKS_AVG_WAIT_TIME = 38;</code>
   */
  LOCKS_AVG_WAIT_TIME(38),
  /**
   * <code>LOCKS_AVG_WAIT_TIME_BASE = 39;</code>
   */
  LOCKS_AVG_WAIT_TIME_BASE(39),
  /**
   * <code>LOCK_REQUESTS = 40;</code>
   */
  LOCK_REQUESTS(40),
  /**
   * <code>MS_TICKS = 41;</code>
   */
  MS_TICKS(41),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>EXECUTION_COUNT = 0;</code>
   */
  public static final int EXECUTION_COUNT_VALUE = 0;
  /**
   * <code>MIN_WORKER_TIME = 1;</code>
   */
  public static final int MIN_WORKER_TIME_VALUE = 1;
  /**
   * <code>MAX_WORKER_TIME = 2;</code>
   */
  public static final int MAX_WORKER_TIME_VALUE = 2;
  /**
   * <code>TOTAL_WORKER_TIME = 3;</code>
   */
  public static final int TOTAL_WORKER_TIME_VALUE = 3;
  /**
   * <code>MIN_PHYSICAL_READS = 4;</code>
   */
  public static final int MIN_PHYSICAL_READS_VALUE = 4;
  /**
   * <code>MAX_PHYSICAL_READS = 5;</code>
   */
  public static final int MAX_PHYSICAL_READS_VALUE = 5;
  /**
   * <code>TOTAL_PHYSICAL_READS = 6;</code>
   */
  public static final int TOTAL_PHYSICAL_READS_VALUE = 6;
  /**
   * <code>MIN_ELAPSED_TIME = 7;</code>
   */
  public static final int MIN_ELAPSED_TIME_VALUE = 7;
  /**
   * <code>MAX_ELAPSED_TIME = 8;</code>
   */
  public static final int MAX_ELAPSED_TIME_VALUE = 8;
  /**
   * <code>TOTAL_ELAPSED_TIME = 9;</code>
   */
  public static final int TOTAL_ELAPSED_TIME_VALUE = 9;
  /**
   * <code>MIN_ROWS = 10;</code>
   */
  public static final int MIN_ROWS_VALUE = 10;
  /**
   * <code>MAX_ROWS = 11;</code>
   */
  public static final int MAX_ROWS_VALUE = 11;
  /**
   * <code>TOTAL_ROWS = 12;</code>
   */
  public static final int TOTAL_ROWS_VALUE = 12;
  /**
   * <code>MIN_SPILLS = 13;</code>
   */
  public static final int MIN_SPILLS_VALUE = 13;
  /**
   * <code>MAX_SPILLS = 14;</code>
   */
  public static final int MAX_SPILLS_VALUE = 14;
  /**
   * <code>TOTAL_SPILLS = 15;</code>
   */
  public static final int TOTAL_SPILLS_VALUE = 15;
  /**
   * <code>USED_MEMORY = 16;</code>
   */
  public static final int USED_MEMORY_VALUE = 16;
  /**
   * <code>TARGET_MEMORY = 17;</code>
   */
  public static final int TARGET_MEMORY_VALUE = 17;
  /**
   * <code>CPU_USAGE_PERC = 18;</code>
   */
  public static final int CPU_USAGE_PERC_VALUE = 18;
  /**
   * <code>CPU_EFFECTIVE_PERC = 19;</code>
   */
  public static final int CPU_EFFECTIVE_PERC_VALUE = 19;
  /**
   * <code>CPU_VIOLATED_PERC = 20;</code>
   */
  public static final int CPU_VIOLATED_PERC_VALUE = 20;
  /**
   * <code>TOTAL_LOGICAL_WRITES = 21;</code>
   */
  public static final int TOTAL_LOGICAL_WRITES_VALUE = 21;
  /**
   * <code>MIN_LOGICAL_WRITES = 22;</code>
   */
  public static final int MIN_LOGICAL_WRITES_VALUE = 22;
  /**
   * <code>MAX_LOGICAL_WRITES = 23;</code>
   */
  public static final int MAX_LOGICAL_WRITES_VALUE = 23;
  /**
   * <code>TOTAL_LOGICAL_READS = 24;</code>
   */
  public static final int TOTAL_LOGICAL_READS_VALUE = 24;
  /**
   * <code>MIN_LOGICAL_READS = 25;</code>
   */
  public static final int MIN_LOGICAL_READS_VALUE = 25;
  /**
   * <code>MAX_LOGICAL_READS = 26;</code>
   */
  public static final int MAX_LOGICAL_READS_VALUE = 26;
  /**
   * <code>TOTAL_USED_GRANT_KB = 27;</code>
   */
  public static final int TOTAL_USED_GRANT_KB_VALUE = 27;
  /**
   * <code>MIN_USED_GRANT_KB = 28;</code>
   */
  public static final int MIN_USED_GRANT_KB_VALUE = 28;
  /**
   * <code>MAX_USED_GRANT_KB = 29;</code>
   */
  public static final int MAX_USED_GRANT_KB_VALUE = 29;
  /**
   * <code>TOTAL_USED_THREADS = 30;</code>
   */
  public static final int TOTAL_USED_THREADS_VALUE = 30;
  /**
   * <code>MIN_USED_THREADS = 31;</code>
   */
  public static final int MIN_USED_THREADS_VALUE = 31;
  /**
   * <code>MAX_USED_THREADS = 32;</code>
   */
  public static final int MAX_USED_THREADS_VALUE = 32;
  /**
   * <code>CPU_USAGE_PERC_BASE = 33;</code>
   */
  public static final int CPU_USAGE_PERC_BASE_VALUE = 33;
  /**
   * <code>CPU_EFFECTIVE_PERC_BASE = 34;</code>
   */
  public static final int CPU_EFFECTIVE_PERC_BASE_VALUE = 34;
  /**
   * <code>CPU_USAGE_TARGET_PERC = 35;</code>
   */
  public static final int CPU_USAGE_TARGET_PERC_VALUE = 35;
  /**
   * <code>DISK_READ_IOPS = 36;</code>
   */
  public static final int DISK_READ_IOPS_VALUE = 36;
  /**
   * <code>DISK_WRITE_IOPS = 37;</code>
   */
  public static final int DISK_WRITE_IOPS_VALUE = 37;
  /**
   * <code>LOCKS_AVG_WAIT_TIME = 38;</code>
   */
  public static final int LOCKS_AVG_WAIT_TIME_VALUE = 38;
  /**
   * <code>LOCKS_AVG_WAIT_TIME_BASE = 39;</code>
   */
  public static final int LOCKS_AVG_WAIT_TIME_BASE_VALUE = 39;
  /**
   * <code>LOCK_REQUESTS = 40;</code>
   */
  public static final int LOCK_REQUESTS_VALUE = 40;
  /**
   * <code>MS_TICKS = 41;</code>
   */
  public static final int MS_TICKS_VALUE = 41;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static LongType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static LongType forNumber(int value) {
    switch (value) {
      case 0: return EXECUTION_COUNT;
      case 1: return MIN_WORKER_TIME;
      case 2: return MAX_WORKER_TIME;
      case 3: return TOTAL_WORKER_TIME;
      case 4: return MIN_PHYSICAL_READS;
      case 5: return MAX_PHYSICAL_READS;
      case 6: return TOTAL_PHYSICAL_READS;
      case 7: return MIN_ELAPSED_TIME;
      case 8: return MAX_ELAPSED_TIME;
      case 9: return TOTAL_ELAPSED_TIME;
      case 10: return MIN_ROWS;
      case 11: return MAX_ROWS;
      case 12: return TOTAL_ROWS;
      case 13: return MIN_SPILLS;
      case 14: return MAX_SPILLS;
      case 15: return TOTAL_SPILLS;
      case 16: return USED_MEMORY;
      case 17: return TARGET_MEMORY;
      case 18: return CPU_USAGE_PERC;
      case 19: return CPU_EFFECTIVE_PERC;
      case 20: return CPU_VIOLATED_PERC;
      case 21: return TOTAL_LOGICAL_WRITES;
      case 22: return MIN_LOGICAL_WRITES;
      case 23: return MAX_LOGICAL_WRITES;
      case 24: return TOTAL_LOGICAL_READS;
      case 25: return MIN_LOGICAL_READS;
      case 26: return MAX_LOGICAL_READS;
      case 27: return TOTAL_USED_GRANT_KB;
      case 28: return MIN_USED_GRANT_KB;
      case 29: return MAX_USED_GRANT_KB;
      case 30: return TOTAL_USED_THREADS;
      case 31: return MIN_USED_THREADS;
      case 32: return MAX_USED_THREADS;
      case 33: return CPU_USAGE_PERC_BASE;
      case 34: return CPU_EFFECTIVE_PERC_BASE;
      case 35: return CPU_USAGE_TARGET_PERC;
      case 36: return DISK_READ_IOPS;
      case 37: return DISK_WRITE_IOPS;
      case 38: return LOCKS_AVG_WAIT_TIME;
      case 39: return LOCKS_AVG_WAIT_TIME_BASE;
      case 40: return LOCK_REQUESTS;
      case 41: return MS_TICKS;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<LongType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      LongType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<LongType>() {
          public LongType findValueByNumber(int number) {
            return LongType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.oltpbenchmark.api.collectors.monitoring.proto.Monitor.getDescriptor().getEnumTypes().get(1);
  }

  private static final LongType[] VALUES = values();

  public static LongType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private LongType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.oltpbenchmark.api.collectors.monitoring.proto.LongType)
}

